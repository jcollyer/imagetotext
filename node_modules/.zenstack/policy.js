"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function Item_postUpdate(context, db) {
    var _a, _b, _c;
    return {
        AND: [{
                AND: [{
                        name: {
                            equals: (_a = context.preValue) === null || _a === void 0 ? void 0 : _a.name
                        }
                    }, {
                        content: {
                            equals: (_b = context.preValue) === null || _b === void 0 ? void 0 : _b.content
                        }
                    }]
            }, (((_c = context.preValue) === null || _c === void 0 ? void 0 : _c.taskId) == null) ? { AND: [] } : { OR: [] }]
    };
}
function Item_read(context, db) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return {
        OR: [{
                taskId: {
                    equals: null
                }
            }, (user == null) ? { OR: [] } : {
                task: {
                    user: {
                        is: {
                            id: user.id
                        }
                    }
                }
            }]
    };
}
function Task_create(context, db) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (user == null) ? { OR: [] } : {
        user: {
            is: {
                id: user.id
            }
        }
    };
}
function Task_read(context, db) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (user == null) ? { OR: [] } : {
        user: {
            is: {
                id: user.id
            }
        }
    };
}
const policy = {
    guard: {
        user: {
            create: true, create_input: true, update: false, postUpdate: true, read: true, delete: false,
        }, item: {
            create: false, create_input: false, update: true, postUpdate: Item_postUpdate, preValueSelect: { "name": true, "content": true, "taskId": true }, read: Item_read, delete: false,
        }, task: {
            create: Task_create, update: false, postUpdate: true, read: Task_read, delete: false,
        },
    },
    validation: {
        user: {
            hasValidation: false
        },
        item: {
            hasValidation: false
        },
        task: {
            hasValidation: false
        },
    }
};
exports.default = policy;
