"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_XEE5EB7M_exports = {};
__export(chunk_XEE5EB7M_exports, {
  checkTypeScriptVersion: () => checkTypeScriptVersion,
  checkUnsupportedDataProxy: () => checkUnsupportedDataProxy,
  checkYarnVersion: () => checkYarnVersion,
  debug: () => debug2,
  forbiddenCmdWithDataProxyFlagMessage: () => forbiddenCmdWithDataProxyFlagMessage,
  formatSchema: () => formatSchema,
  generatorResolvers: () => generatorResolvers,
  getBinaryTargetForCurrentPlatform: () => import_get_platform2.getBinaryTargetForCurrentPlatform,
  getGenerator: () => getGenerator,
  getGenerators: () => getGenerators,
  getNodeAPIName: () => import_get_platform2.getNodeAPIName,
  knownBinaryTargets: () => knownBinaryTargets,
  prismaClientResolver: () => prismaClientResolver,
  skipIndex: () => skipIndex
});
module.exports = __toCommonJS(chunk_XEE5EB7M_exports);
var import_chunk_EUTJYQDW = require("./chunk-EUTJYQDW.js");
var import_chunk_IPKE37QC = require("./chunk-IPKE37QC.js");
var import_chunk_SRPZKBCT = require("./chunk-SRPZKBCT.js");
var import_chunk_7ZM35CLA = require("./chunk-7ZM35CLA.js");
var import_chunk_S3MODULX = require("./chunk-S3MODULX.js");
var import_chunk_RPKAB7EJ = require("./chunk-RPKAB7EJ.js");
var import_chunk_MCWIJA45 = require("./chunk-MCWIJA45.js");
var import_chunk_X3P4J7WW = require("./chunk-X3P4J7WW.js");
var import_chunk_CY7LXP6Y = require("./chunk-CY7LXP6Y.js");
var import_chunk_RS2R7COT = require("./chunk-RS2R7COT.js");
var import_chunk_X77CS5RK = require("./chunk-X77CS5RK.js");
var import_chunk_5V36RLCO = require("./chunk-5V36RLCO.js");
var import_chunk_JE2YWM7K = require("./chunk-JE2YWM7K.js");
var import_chunk_YVO3HMIJ = require("./chunk-YVO3HMIJ.js");
var import_chunk_B52PSZWW = require("./chunk-B52PSZWW.js");
var import_chunk_4BR67JWQ = require("./chunk-4BR67JWQ.js");
var import_chunk_I24RYSCQ = require("./chunk-I24RYSCQ.js");
var import_chunk_Z7JJ2NRW = require("./chunk-Z7JJ2NRW.js");
var import_chunk_J77ZIDXB = require("./chunk-J77ZIDXB.js");
var import_chunk_LWBY6A4I = require("./chunk-LWBY6A4I.js");
var import_chunk_LDAJSPFG = require("./chunk-LDAJSPFG.js");
var import_chunk_EPZFD23W = require("./chunk-EPZFD23W.js");
var import_chunk_WCSPL6MU = require("./chunk-WCSPL6MU.js");
var import_chunk_LXMH457V = require("./chunk-LXMH457V.js");
var import_chunk_2B26F5N3 = require("./chunk-2B26F5N3.js");
var import_chunk_M3GBKLGE = require("./chunk-M3GBKLGE.js");
var import_chunk_KTERFAQE = require("./chunk-KTERFAQE.js");
var import_chunk_A4QWQE3W = require("./chunk-A4QWQE3W.js");
var import_chunk_2S3XA3II = require("./chunk-2S3XA3II.js");
var import_chunk_UJCWYERA = require("./chunk-UJCWYERA.js");
var import_chunk_WTCY7DFZ = require("./chunk-WTCY7DFZ.js");
var import_chunk_WIPBZJFE = require("./chunk-WIPBZJFE.js");
var import_chunk_ZC2VYKFA = require("./chunk-ZC2VYKFA.js");
var import_chunk_DJGRU4RH = require("./chunk-DJGRU4RH.js");
var import_chunk_FVJ3R4NJ = require("./chunk-FVJ3R4NJ.js");
var import_fs = __toESM2(require("fs"));
var import_fs2 = __toESM2(require("fs"));
var import_debug = __toESM2(require("@prisma/debug"));
var import_engines = require("@prisma/engines");
var import_fetch_engine = require("@prisma/fetch-engine");
var import_get_platform = require("@prisma/get-platform");
var import_fs3 = __toESM2(require("fs"));
var import_path = __toESM2(require("path"));
var import_debug2 = __toESM2(require("@prisma/debug"));
var import_fs4 = __toESM2(require("fs"));
var import_path2 = __toESM2(require("path"));
var import_debug3 = __toESM2(require("@prisma/debug"));
var import_fs5 = __toESM2(require("fs"));
var import_path3 = __toESM2(require("path"));
var import_get_platform2 = require("@prisma/get-platform");
function isSchemaOnly(schemaParams) {
  return Boolean(schemaParams.schema);
}
function isSchemaPathOnly(schemaParams) {
  return Boolean(schemaParams.schemaPath);
}
async function formatSchema({ schemaPath: schemaPath2, schema }, inputFormattingOptions) {
  if (!schema && !schemaPath2) {
    throw new Error(`Parameter schema or schemaPath must be passed.`);
  }
  if (process.env.FORCE_PANIC_PRISMA_SCHEMA) {
    handleFormatPanic(
      () => {
        import_chunk_WCSPL6MU.prismaSchemaWasm.debug_panic();
      },
      { schemaPath: schemaPath2, schema }
    );
  }
  const schemaContent = (0, import_chunk_KTERFAQE.N)({ schema, schemaPath: schemaPath2 }).when(isSchemaOnly, ({ schema: _schema }) => _schema).when(isSchemaPathOnly, ({ schemaPath: _schemaPath }) => {
    if (!import_fs2.default.existsSync(_schemaPath)) {
      throw new Error(`Schema at ${schemaPath2} does not exist.`);
    }
    const _schema = import_fs2.default.readFileSync(_schemaPath, { encoding: "utf8" });
    return _schema;
  }).exhaustive();
  const defaultFormattingOptions = {
    tabSize: 2,
    insertSpaces: true
  };
  const documentFormattingParams = {
    textDocument: { uri: "file:/dev/null" },
    options: {
      ...defaultFormattingOptions,
      ...inputFormattingOptions
    }
  };
  const { formattedSchema, lintDiagnostics } = handleFormatPanic(
    () => {
      const formattedSchema2 = formatWasm(schemaContent, documentFormattingParams);
      const lintDiagnostics2 = (0, import_chunk_LWBY6A4I.lintSchema)({ schema: formattedSchema2 });
      return { formattedSchema: formattedSchema2, lintDiagnostics: lintDiagnostics2 };
    },
    { schemaPath: schemaPath2, schema }
  );
  const lintWarnings = (0, import_chunk_LWBY6A4I.getLintWarningsAsText)(lintDiagnostics);
  if (lintWarnings && import_chunk_ZC2VYKFA.logger_exports.should.warn()) {
    console.warn(lintWarnings);
  }
  return Promise.resolve(formattedSchema);
}
function handleFormatPanic(tryCb, { schemaPath: schemaPath2, schema }) {
  try {
    return tryCb();
  } catch (e) {
    const { message, stack } = (0, import_chunk_A4QWQE3W.getWasmError)(e);
    const panic = new import_chunk_A4QWQE3W.RustPanic(
      /* message */
      message,
      /* rustStack */
      stack,
      /* request */
      "@prisma/prisma-schema-wasm format",
      "FMT_CLI",
      schemaPath2,
      schema
    );
    throw panic;
  }
}
function formatWasm(schema, documentFormattingParams) {
  const formattedSchema = import_chunk_WCSPL6MU.prismaSchemaWasm.format(schema, JSON.stringify(documentFormattingParams));
  return formattedSchema;
}
var import_p_map = (0, import_chunk_FVJ3R4NJ.__toESM)((0, import_chunk_WTCY7DFZ.require_p_map)());
var debug = (0, import_debug3.default)("prisma:generator");
async function checkTypeScriptVersion() {
  const minVersion = "4.1.0";
  try {
    const typescriptPath = await (0, import_chunk_WIPBZJFE.resolvePkg)("typescript", {
      basedir: process.cwd()
    });
    debug("typescriptPath", typescriptPath);
    const typescriptPkg = typescriptPath && import_path3.default.join(typescriptPath, "package.json");
    if (typescriptPkg && import_fs5.default.existsSync(typescriptPkg)) {
      const pjson = (0, import_chunk_FVJ3R4NJ.__require)(typescriptPkg);
      const currentVersion = pjson.version;
      if ((0, import_chunk_EUTJYQDW.semverLt)(currentVersion, minVersion)) {
        import_chunk_ZC2VYKFA.logger_exports.warn(
          `Prisma detected that your ${(0, import_chunk_DJGRU4RH.bold)(
            "TypeScript"
          )} version ${currentVersion} is outdated. If you want to use Prisma Client with TypeScript please update it to version ${(0, import_chunk_DJGRU4RH.bold)(
            minVersion
          )} or ${(0, import_chunk_DJGRU4RH.bold)("newer")}. ${(0, import_chunk_DJGRU4RH.dim)(`TypeScript found in: ${(0, import_chunk_DJGRU4RH.bold)(typescriptPath)}`)}`
        );
      }
    }
  } catch (e) {
  }
}
function checkYarnVersion() {
  if (process.env.npm_config_user_agent) {
    const match = parseUserAgentString(process.env.npm_config_user_agent);
    if (match) {
      const { agent, major, minor, patch } = match;
      if (agent === "yarn" && major === 1) {
        const currentYarnVersion = `${major}.${minor}.${patch}`;
        const minYarnVersion = "1.19.2";
        if ((0, import_chunk_EUTJYQDW.semverLt)(currentYarnVersion, minYarnVersion)) {
          import_chunk_ZC2VYKFA.logger_exports.warn(
            `Your ${(0, import_chunk_DJGRU4RH.bold)("yarn")} has version ${currentYarnVersion}, which is outdated. Please update it to ${(0, import_chunk_DJGRU4RH.bold)(
              minYarnVersion
            )} or ${(0, import_chunk_DJGRU4RH.bold)("newer")} in order to use Prisma.`
          );
        }
      }
    }
  }
}
function parseUserAgentString(str) {
  const userAgentRegex = /(\w+)\/(\d+)\.(\d+)\.(\d+)/;
  const match = userAgentRegex.exec(str);
  if (match) {
    const agent = match[1];
    const major = parseInt(match[2]);
    const minor = parseInt(match[3]);
    const patch = parseInt(match[4]);
    return { agent, major, minor, patch };
  }
  return null;
}
var debug2 = (0, import_debug2.default)("prisma:generator");
async function prismaClientResolver(baseDir2, version3) {
  let prismaClientDir = await (0, import_chunk_SRPZKBCT.findPrismaClientDir)(baseDir2);
  debug2("baseDir", baseDir2);
  checkYarnVersion();
  await checkTypeScriptVersion();
  if (!prismaClientDir && !process.env.PRISMA_GENERATE_SKIP_AUTOINSTALL) {
    let projectRoot = (0, import_chunk_J77ZIDXB.longestCommonPathPrefix)(baseDir2, process.cwd());
    debug2("projectRoot", projectRoot);
    const warningTag = `${(0, import_chunk_DJGRU4RH.bold)("Warning:")} ${(0, import_chunk_DJGRU4RH.dim)("[Prisma auto-install on generate]")}`;
    if (projectRoot === void 0) {
      console.warn(
        (0, import_chunk_DJGRU4RH.yellow)(
          `${warningTag} The Prisma schema directory ${(0, import_chunk_DJGRU4RH.bold)(baseDir2)} and the current working directory ${(0, import_chunk_DJGRU4RH.bold)(
            process.cwd()
          )} have no common ancestor. The Prisma schema directory will be used as the project root.`
        )
      );
      projectRoot = baseDir2;
    }
    if (!import_fs4.default.existsSync(import_path2.default.join(projectRoot, "package.json"))) {
      console.warn(
        (0, import_chunk_DJGRU4RH.yellow)(
          `${warningTag} Prisma could not find a ${(0, import_chunk_DJGRU4RH.bold)("package.json")} file in the inferred project root ${(0, import_chunk_DJGRU4RH.bold)(
            projectRoot
          )}. During the next step, when an auto-install of Prisma package(s) will be attempted, it will then be created by your package manager on the appropriate level if necessary.`
        )
      );
    }
    const prismaCliDir = await (0, import_chunk_WIPBZJFE.resolvePkg)("prisma", { basedir: baseDir2 });
    if (process.platform === "win32" && await (0, import_chunk_RPKAB7EJ.isYarnUsed)(baseDir2)) {
      const hasCli = (s) => prismaCliDir !== void 0 ? s : "";
      const missingCli = (s) => prismaCliDir === void 0 ? s : "";
      throw new Error(
        `Could not resolve ${missingCli(`${(0, import_chunk_DJGRU4RH.bold)("prisma")} and `)}${(0, import_chunk_DJGRU4RH.bold)(
          "@prisma/client"
        )} in the current project. Please install ${hasCli("it")}${missingCli("them")} with ${missingCli(
          `${(0, import_chunk_DJGRU4RH.bold)((0, import_chunk_DJGRU4RH.green)(`${await (0, import_chunk_S3MODULX.getPackageCmd)(baseDir2, "add", "prisma", "-D")}`))} and `
        )}${(0, import_chunk_DJGRU4RH.bold)((0, import_chunk_DJGRU4RH.green)(`${await (0, import_chunk_S3MODULX.getPackageCmd)(baseDir2, "add", "@prisma/client")}`))}, and rerun ${(0, import_chunk_DJGRU4RH.bold)(
          await (0, import_chunk_S3MODULX.getPackageCmd)(baseDir2, "execute", "prisma generate")
        )} \u{1F64F}.`
      );
    }
    if (!prismaCliDir) {
      await (0, import_chunk_7ZM35CLA.runPackageCmd)(projectRoot, "add", `prisma@${version3 ?? "latest"}`, "-D");
    }
    await (0, import_chunk_7ZM35CLA.runPackageCmd)(projectRoot, "add", `@prisma/client@${version3 ?? "latest"}`);
    prismaClientDir = await (0, import_chunk_SRPZKBCT.findPrismaClientDir)(import_path2.default.join(".", baseDir2));
    if (!prismaClientDir) {
      throw new Error(
        `Could not resolve @prisma/client despite the installation that we just tried.
Please try to install it by hand with ${(0, import_chunk_DJGRU4RH.bold)(
          (0, import_chunk_DJGRU4RH.green)(`${await (0, import_chunk_S3MODULX.getPackageCmd)(baseDir2, "add", "@prisma/client")}`)
        )} and rerun ${(0, import_chunk_DJGRU4RH.bold)(await (0, import_chunk_S3MODULX.getPackageCmd)(baseDir2, "execute", "prisma generate"))} \u{1F64F}.`
      );
    }
    console.info(
      `
\u2714 Installed the ${(0, import_chunk_DJGRU4RH.bold)((0, import_chunk_DJGRU4RH.green)("@prisma/client"))} and ${(0, import_chunk_DJGRU4RH.bold)((0, import_chunk_DJGRU4RH.green)("prisma"))} packages in your project`
    );
  }
  if (!prismaClientDir) {
    throw new Error(
      `Could not resolve @prisma/client.
Please try to install it with ${(0, import_chunk_DJGRU4RH.bold)((0, import_chunk_DJGRU4RH.green)("npm install @prisma/client"))} and rerun ${(0, import_chunk_DJGRU4RH.bold)(
        await (0, import_chunk_S3MODULX.getPackageCmd)(baseDir2, "execute", "prisma generate")
      )} \u{1F64F}.`
    );
  }
  return {
    outputPath: prismaClientDir,
    generatorPath: import_path2.default.resolve(prismaClientDir, "generator-build/index.js"),
    isNode: true
  };
}
var generatorResolvers = {
  "prisma-client-js": prismaClientResolver
};
var debug3 = (0, import_debug.default)("prisma:getGenerators");
async function getGenerators(options) {
  const {
    schemaPath,
    providerAliases: aliases,
    // do you get the pun?
    version,
    cliVersion,
    printDownloadProgress,
    baseDir = import_path.default.dirname(schemaPath),
    overrideGenerators,
    skipDownload,
    binaryPathsOverride,
    generatorNames = [],
    postinstall,
    noEngine
  } = options;
  if (!schemaPath) {
    throw new Error(`schemaPath for getGenerators got invalid value ${schemaPath}`);
  }
  if (!import_fs3.default.existsSync(schemaPath)) {
    throw new Error(`${schemaPath} does not exist`);
  }
  const binaryTarget = await (0, import_get_platform.getBinaryTargetForCurrentPlatform)();
  const queryEngineBinaryType = (0, import_engines.getCliQueryEngineBinaryType)();
  const queryEngineType = (0, import_chunk_RS2R7COT.binaryTypeToEngineType)(queryEngineBinaryType);
  let prismaPath = binaryPathsOverride?.[queryEngineType];
  if (version && !prismaPath) {
    const potentialPath = eval(`require('path').join(__dirname, '..')`);
    if (!potentialPath.match(import_chunk_M3GBKLGE.vercelPkgPathRegex)) {
      const downloadParams = {
        binaries: {
          [queryEngineBinaryType]: potentialPath
        },
        binaryTargets: [binaryTarget],
        showProgress: false,
        version,
        skipDownload
      };
      const binaryPathsWithEngineType = await (0, import_fetch_engine.download)(downloadParams);
      prismaPath = binaryPathsWithEngineType[queryEngineBinaryType][binaryTarget];
    }
  }
  const datamodel = import_fs3.default.readFileSync(schemaPath, "utf-8");
  const config = await (0, import_chunk_LDAJSPFG.getConfig)({
    datamodel,
    datamodelPath: schemaPath,
    prismaPath,
    ignoreEnvVarErrors: true
  });
  if (config.datasources.length === 0) {
    throw new Error(import_chunk_YVO3HMIJ.missingDatasource);
  }
  (0, import_chunk_JE2YWM7K.printConfigWarnings)(config.warnings);
  const previewFeatures = (0, import_chunk_Z7JJ2NRW.extractPreviewFeatures)(config);
  const dmmf = await (0, import_chunk_EPZFD23W.getDMMF)({
    datamodel,
    datamodelPath: schemaPath,
    prismaPath,
    previewFeatures
  });
  if (dmmf.datamodel.models.length === 0) {
    if (config.datasources.some((d) => d.provider === "mongodb")) {
      throw new Error(import_chunk_B52PSZWW.missingModelMessageMongoDB);
    }
    throw new Error(import_chunk_B52PSZWW.missingModelMessage);
  }
  (0, import_chunk_IPKE37QC.checkFeatureFlags)(config, options);
  const generatorConfigs = filterGenerators(overrideGenerators || config.generators, generatorNames);
  await validateGenerators(generatorConfigs);
  const runningGenerators = [];
  try {
    const generators = await (0, import_p_map.default)(
      generatorConfigs,
      async (generator, index) => {
        let generatorPath = (0, import_chunk_UJCWYERA.parseEnvValue)(generator.provider);
        let paths;
        const providerValue = (0, import_chunk_UJCWYERA.parseEnvValue)(generator.provider);
        if (aliases && aliases[providerValue]) {
          generatorPath = aliases[providerValue].generatorPath;
          paths = aliases[providerValue];
        } else if (generatorResolvers[providerValue]) {
          paths = await generatorResolvers[providerValue](baseDir, cliVersion);
          generatorPath = paths.generatorPath;
        }
        const generatorInstance = new import_chunk_2S3XA3II.Generator(generatorPath, generator, paths?.isNode);
        await generatorInstance.init();
        if (generator.output) {
          generator.output = {
            value: import_path.default.resolve(baseDir, (0, import_chunk_UJCWYERA.parseEnvValue)(generator.output)),
            fromEnvVar: null
          };
          generator.isCustomOutput = true;
        } else if (paths) {
          generator.output = {
            value: paths.outputPath,
            fromEnvVar: null
          };
        } else {
          if (!generatorInstance.manifest || !generatorInstance.manifest.defaultOutput) {
            throw new Error(
              `Can't resolve output dir for generator ${(0, import_chunk_DJGRU4RH.bold)(generator.name)} with provider ${(0, import_chunk_DJGRU4RH.bold)(
                generator.provider.value
              )}.
The generator needs to either define the \`defaultOutput\` path in the manifest or you need to define \`output\` in the datamodel.prisma file.`
            );
          }
          generator.output = {
            value: await (0, import_chunk_2B26F5N3.resolveOutput)({
              defaultOutput: generatorInstance.manifest.defaultOutput,
              baseDir
            }),
            fromEnvVar: "null"
          };
        }
        const options2 = {
          datamodel,
          datasources: config.datasources,
          generator,
          dmmf,
          otherGenerators: skipIndex(generatorConfigs, index),
          schemaPath,
          version: version || import_engines.enginesVersion,
          // this version makes no sense anymore and should be ignored
          postinstall,
          noEngine
        };
        generatorInstance.setOptions(options2);
        runningGenerators.push(generatorInstance);
        return generatorInstance;
      },
      {
        stopOnError: false
        // needed so we can first make sure all generators are created properly, then cleaned up properly
      }
    );
    const generatorProviders = generatorConfigs.map((g) => (0, import_chunk_UJCWYERA.parseEnvValue)(g.provider));
    for (const g of generators) {
      if (g.manifest && g.manifest.requiresGenerators && g.manifest.requiresGenerators.length > 0) {
        for (const neededGenerator of g.manifest.requiresGenerators) {
          if (!generatorProviders.includes(neededGenerator)) {
            throw new Error(
              `Generator "${g.manifest.prettyName}" requires generator "${neededGenerator}", but it is missing in your schema.prisma.
Please add it to your schema.prisma:

generator gen {
  provider = "${neededGenerator}"
}
`
            );
          }
        }
      }
    }
    const neededVersions = /* @__PURE__ */ Object.create(null);
    for (const g of generators) {
      if (g.manifest && g.manifest.requiresEngines && Array.isArray(g.manifest.requiresEngines) && g.manifest.requiresEngines.length > 0) {
        const neededVersion = (0, import_chunk_X3P4J7WW.getEngineVersionForGenerator)(g.manifest, version);
        if (!neededVersions[neededVersion]) {
          neededVersions[neededVersion] = { engines: [], binaryTargets: [] };
        }
        for (const engine of g.manifest.requiresEngines) {
          if (!neededVersions[neededVersion].engines.includes(engine)) {
            neededVersions[neededVersion].engines.push(engine);
          }
        }
        const generatorBinaryTargets = g.options?.generator?.binaryTargets;
        if (generatorBinaryTargets && generatorBinaryTargets.length > 0) {
          for (const binaryTarget2 of generatorBinaryTargets) {
            if (!neededVersions[neededVersion].binaryTargets.find((object) => object.value === binaryTarget2.value)) {
              neededVersions[neededVersion].binaryTargets.push(binaryTarget2);
            }
          }
        }
      }
    }
    debug3("neededVersions", JSON.stringify(neededVersions, null, 2));
    const binaryPathsByVersion = await (0, import_chunk_MCWIJA45.getBinaryPathsByVersion)({
      neededVersions,
      binaryTarget,
      version,
      printDownloadProgress,
      skipDownload,
      binaryPathsOverride
    });
    for (const generator of generators) {
      if (generator.manifest && generator.manifest.requiresEngines) {
        const engineVersion = (0, import_chunk_X3P4J7WW.getEngineVersionForGenerator)(generator.manifest, version);
        const binaryPaths = binaryPathsByVersion[engineVersion];
        const generatorBinaryPaths = (0, import_chunk_5V36RLCO.pick)(binaryPaths, generator.manifest.requiresEngines);
        debug3({ generatorBinaryPaths });
        generator.setBinaryPaths(generatorBinaryPaths);
        if (engineVersion !== version && generator.options && generator.manifest.requiresEngines.includes(queryEngineType) && generatorBinaryPaths[queryEngineType] && generatorBinaryPaths[queryEngineType]?.[binaryTarget]) {
          const customDmmf = await (0, import_chunk_EPZFD23W.getDMMF)({
            datamodel,
            datamodelPath: schemaPath,
            prismaPath: generatorBinaryPaths[queryEngineType]?.[binaryTarget],
            previewFeatures
          });
          const options2 = { ...generator.options, dmmf: customDmmf };
          debug3("generator.manifest.prettyName", generator.manifest.prettyName);
          debug3("options", options2);
          debug3("options.generator.binaryTargets", options2.generator.binaryTargets);
          generator.setOptions(options2);
        }
      }
    }
    return generators;
  } catch (e) {
    runningGenerators.forEach((g) => g.stop());
    throw e;
  }
}
async function getGenerator(options2) {
  const generators = await getGenerators(options2);
  return generators[0];
}
function skipIndex(arr, index) {
  return [...arr.slice(0, index), ...arr.slice(index + 1)];
}
var knownBinaryTargets = [...import_get_platform.binaryTargets, "native"];
var oldToNewBinaryTargetsMapping = {
  "linux-glibc-libssl1.0.1": "debian-openssl-1.0.x",
  "linux-glibc-libssl1.0.2": "debian-openssl-1.0.x",
  "linux-glibc-libssl1.1.0": "debian-openssl1.1.x"
};
async function validateGenerators(generators) {
  const binaryTarget2 = await (0, import_get_platform.getBinaryTargetForCurrentPlatform)();
  for (const generator of generators) {
    if (generator.config.platforms) {
      throw new Error(
        `The \`platforms\` field on the generator definition is deprecated. Please rename it to \`binaryTargets\`.`
      );
    }
    if (generator.config.pinnedBinaryTargets) {
      throw new Error(
        `The \`pinnedBinaryTargets\` field on the generator definition is deprecated.
Please use the PRISMA_QUERY_ENGINE_BINARY env var instead to pin the binary target.`
      );
    }
    if (generator.binaryTargets) {
      const binaryTargets2 = generator.binaryTargets && generator.binaryTargets.length > 0 ? generator.binaryTargets : [{ fromEnvVar: null, value: "native" }];
      const resolvedBinaryTargets = binaryTargets2.flatMap((object) => (0, import_chunk_UJCWYERA.parseBinaryTargetsEnvValue)(object)).map((p) => p === "native" ? binaryTarget2 : p);
      for (const resolvedBinaryTarget of resolvedBinaryTargets) {
        if (oldToNewBinaryTargetsMapping[resolvedBinaryTarget]) {
          throw new Error(
            `Binary target ${(0, import_chunk_DJGRU4RH.red)((0, import_chunk_DJGRU4RH.bold)(resolvedBinaryTarget))} is deprecated. Please use ${(0, import_chunk_DJGRU4RH.green)(
              (0, import_chunk_DJGRU4RH.bold)(oldToNewBinaryTargetsMapping[resolvedBinaryTarget])
            )} instead.`
          );
        }
        if (!knownBinaryTargets.includes(resolvedBinaryTarget)) {
          throw new Error(
            `Unknown binary target ${(0, import_chunk_DJGRU4RH.red)(resolvedBinaryTarget)} in generator ${(0, import_chunk_DJGRU4RH.bold)(generator.name)}.
Possible binaryTargets: ${(0, import_chunk_DJGRU4RH.green)(knownBinaryTargets.join(", "))}`
          );
        }
      }
      if (!resolvedBinaryTargets.includes(binaryTarget2)) {
        const originalBinaryTargetsConfig = (0, import_chunk_CY7LXP6Y.getOriginalBinaryTargetsValue)(generator.binaryTargets);
        console.log(`${(0, import_chunk_DJGRU4RH.yellow)("Warning:")} Your current platform \`${(0, import_chunk_DJGRU4RH.bold)(
          binaryTarget2
        )}\` is not included in your generator's \`binaryTargets\` configuration ${JSON.stringify(
          originalBinaryTargetsConfig
        )}.
To fix it, use this generator config in your ${(0, import_chunk_DJGRU4RH.bold)("schema.prisma")}:
${(0, import_chunk_DJGRU4RH.green)(
          (0, import_chunk_CY7LXP6Y.printGeneratorConfig)({
            ...generator,
            binaryTargets: (0, import_chunk_X77CS5RK.fixBinaryTargets)(generator.binaryTargets, binaryTarget2)
          })
        )}
${(0, import_chunk_DJGRU4RH.gray)(
          `Note, that by providing \`native\`, Prisma Client automatically resolves \`${binaryTarget2}\`.
Read more about deploying Prisma Client: ${(0, import_chunk_DJGRU4RH.underline)(
            "https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/generators"
          )}`
        )}
`);
      }
    }
  }
}
function filterGenerators(generators, generatorNames2) {
  if (generatorNames2.length < 1) {
    return generators;
  }
  const filtered = generators.filter((generator) => generatorNames2.includes(generator.name));
  if (filtered.length !== generatorNames2.length) {
    const missings = generatorNames2.filter((name) => filtered.find((generator) => generator.name === name) == null);
    const isSingular = missings.length <= 1;
    throw new Error(
      `The ${isSingular ? "generator" : "generators"} ${(0, import_chunk_DJGRU4RH.bold)(missings.join(", "))} specified via ${(0, import_chunk_DJGRU4RH.bold)(
        "--generator"
      )} ${isSingular ? "does" : "do"} not exist in your Prisma schema`
    );
  }
  return filtered;
}
var forbiddenCmdWithDataProxyFlagMessage = (command) => `
Using an Accelerate URL is not supported for this CLI command ${(0, import_chunk_DJGRU4RH.green)(`prisma ${command}`)} yet.
Please use a direct connection to your database via the datasource \`directUrl\` setting.

More information about this limitation: ${(0, import_chunk_I24RYSCQ.link)("https://pris.ly/d/accelerate-limitations")}
`;
async function checkUnsupportedDataProxyMessage(command, args, implicitSchema) {
  if (implicitSchema === true) {
    args["--schema"] = await (0, import_chunk_LXMH457V.getSchemaPath)(args["--schema"]) ?? void 0;
  }
  const argList = Object.entries(args);
  for (const [argName, argValue] of argList) {
    if (argName.includes("url") && argValue.includes("prisma://")) {
      return forbiddenCmdWithDataProxyFlagMessage(command);
    }
    if (argName.includes("schema")) {
      (0, import_chunk_4BR67JWQ.loadEnvFile)({ schemaPath: argValue, printMessage: false });
      const datamodel2 = await import_fs.default.promises.readFile(argValue, "utf-8");
      const config2 = await (0, import_chunk_LDAJSPFG.getConfig)({ datamodel: datamodel2, ignoreEnvVarErrors: true });
      const url = (0, import_chunk_LDAJSPFG.resolveUrl)((0, import_chunk_LDAJSPFG.getEffectiveUrl)(config2.datasources[0]));
      if (url?.startsWith("prisma://")) {
        return forbiddenCmdWithDataProxyFlagMessage(command);
      }
    }
  }
  return void 0;
}
async function checkUnsupportedDataProxy(command, args, implicitSchema) {
  const message = await checkUnsupportedDataProxyMessage(command, args, implicitSchema).catch(() => void 0);
  if (message)
    throw new Error(message);
}
