"use strict";
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable @typescript-eslint/no-explicit-any */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withPolicy = void 0;
const semver_1 = __importDefault(require("semver"));
const constants_1 = require("../../constants");
const cross_1 = require("../../cross");
const loader_1 = require("../../loader");
const validation_1 = require("../../validation");
const proxy_1 = require("../proxy");
const handler_1 = require("./handler");
/**
 * Gets an enhanced Prisma client with access policy check.
 *
 * @param prisma The original Prisma client
 * @param context The policy evaluation context
 * @param policy The policy definition, will be loaded from default location if not provided
 * @param modelMeta The model metadata, will be loaded from default location if not provided
 *
 * @deprecated Use {@link enhance} instead
 */
function withPolicy(prisma, context, options) {
    var _a, _b, _c;
    if (!prisma) {
        throw new Error('Invalid prisma instance');
    }
    const prismaVer = prisma._clientVersion;
    if (prismaVer && semver_1.default.lt(prismaVer, constants_1.PRISMA_MINIMUM_VERSION)) {
        console.warn(`ZenStack requires Prisma version "${constants_1.PRISMA_MINIMUM_VERSION}" or higher. Detected version is "${prismaVer}".`);
    }
    const _policy = (_a = options === null || options === void 0 ? void 0 : options.policy) !== null && _a !== void 0 ? _a : (0, loader_1.getDefaultPolicy)(options === null || options === void 0 ? void 0 : options.loadPath);
    const _modelMeta = (_b = options === null || options === void 0 ? void 0 : options.modelMeta) !== null && _b !== void 0 ? _b : (0, loader_1.getDefaultModelMeta)(options === null || options === void 0 ? void 0 : options.loadPath);
    const _zodSchemas = (_c = options === null || options === void 0 ? void 0 : options.zodSchemas) !== null && _c !== void 0 ? _c : (0, loader_1.getDefaultZodSchemas)(options === null || options === void 0 ? void 0 : options.loadPath);
    // validate user context
    const userContext = context === null || context === void 0 ? void 0 : context.user;
    if (userContext && _modelMeta.authModel) {
        const idFields = (0, cross_1.getIdFields)(_modelMeta, _modelMeta.authModel);
        if (!(0, validation_1.hasAllFields)(context.user, idFields.map((f) => f.name))) {
            throw new Error(`Invalid user context: must have valid ID field ${idFields.map((f) => `"${f.name}"`).join(', ')}`);
        }
        // validate user context for fields used in policy expressions
        const authSelector = _policy.authSelector;
        if (authSelector) {
            Object.keys(authSelector).forEach((f) => {
                if (!(f in userContext)) {
                    console.warn(`User context does not have field "${f}" used in policy rules`);
                }
            });
        }
    }
    return (0, proxy_1.makeProxy)(prisma, _modelMeta, (_prisma, model) => new handler_1.PolicyProxyHandler(_prisma, _policy, _modelMeta, _zodSchemas, model, context === null || context === void 0 ? void 0 : context.user, options), 'policy', options === null || options === void 0 ? void 0 : options.errorTransformer);
}
exports.withPolicy = withPolicy;
//# sourceMappingURL=index.js.map