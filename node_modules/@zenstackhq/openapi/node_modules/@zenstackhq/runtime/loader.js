"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultZodSchemas = exports.getDefaultPolicy = exports.getDefaultModelMeta = void 0;
/* eslint-disable @typescript-eslint/no-var-requires */
const path_1 = __importDefault(require("path"));
/**
 * Load model metadata.
 *
 * @param loadPath The path to load model metadata from. If not provided,
 * will use default load path.
 */
function getDefaultModelMeta(loadPath) {
    try {
        if (loadPath) {
            const toLoad = path_1.default.resolve(loadPath, 'model-meta');
            return require(toLoad).default;
        }
        else {
            return require('.zenstack/model-meta').default;
        }
    }
    catch (_a) {
        if (process.env.ZENSTACK_TEST === '1' && !loadPath) {
            try {
                // special handling for running as tests, try resolving relative to CWD
                return require(path_1.default.join(process.cwd(), 'node_modules', '.zenstack', 'model-meta')).default;
            }
            catch (_b) {
                throw new Error('Model meta cannot be loaded. Please make sure "zenstack generate" has been run.');
            }
        }
        throw new Error('Model meta cannot be loaded. Please make sure "zenstack generate" has been run.');
    }
}
exports.getDefaultModelMeta = getDefaultModelMeta;
/**
 * Load access policies.
 *
 * @param loadPath The path to load access policies from. If not provided,
 * will use default load path.
 */
function getDefaultPolicy(loadPath) {
    try {
        if (loadPath) {
            const toLoad = path_1.default.resolve(loadPath, 'policy');
            return require(toLoad).default;
        }
        else {
            return require('.zenstack/policy').default;
        }
    }
    catch (_a) {
        if (process.env.ZENSTACK_TEST === '1' && !loadPath) {
            try {
                // special handling for running as tests, try resolving relative to CWD
                return require(path_1.default.join(process.cwd(), 'node_modules', '.zenstack', 'policy')).default;
            }
            catch (_b) {
                throw new Error('Policy definition cannot be loaded from default location. Please make sure "zenstack generate" has been run.');
            }
        }
        throw new Error('Policy definition cannot be loaded from default location. Please make sure "zenstack generate" has been run.');
    }
}
exports.getDefaultPolicy = getDefaultPolicy;
/**
 * Load zod schemas.
 *
 * @param loadPath The path to load zod schemas from. If not provided,
 * will use default load path.
 */
function getDefaultZodSchemas(loadPath) {
    try {
        if (loadPath) {
            const toLoad = path_1.default.resolve(loadPath, 'zod');
            return require(toLoad);
        }
        else {
            return require('.zenstack/zod');
        }
    }
    catch (_a) {
        if (process.env.ZENSTACK_TEST === '1' && !loadPath) {
            try {
                // special handling for running as tests, try resolving relative to CWD
                return require(path_1.default.join(process.cwd(), 'node_modules', '.zenstack', 'zod'));
            }
            catch (_b) {
                return undefined;
            }
        }
        return undefined;
    }
}
exports.getDefaultZodSchemas = getDefaultZodSchemas;
//# sourceMappingURL=loader.js.map