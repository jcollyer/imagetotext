"use strict";
/* eslint-disable @typescript-eslint/no-var-requires */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDMMF = exports.getPrismaClientImportSpec = exports.getPrismaVersion = void 0;
const runtime_1 = require("@zenstackhq/runtime");
const path_1 = __importDefault(require("path"));
const semver = __importStar(require("semver"));
const ast_1 = require("./ast");
const utils_1 = require("./utils");
// reexport
var runtime_2 = require("@zenstackhq/runtime");
Object.defineProperty(exports, "getPrismaVersion", { enumerable: true, get: function () { return runtime_2.getPrismaVersion; } });
/**
 * Given a ZModel and an import context directory, compute the import spec for the Prisma Client.
 */
function getPrismaClientImportSpec(model, importingFromDir) {
    var _a;
    const generator = model.declarations.find((d) => (0, ast_1.isGeneratorDecl)(d) &&
        d.fields.some((f) => f.name === 'provider' && (0, utils_1.getLiteral)(f.value) === 'prisma-client-js'));
    const clientOutputField = generator === null || generator === void 0 ? void 0 : generator.fields.find((f) => f.name === 'output');
    const clientOutput = (0, utils_1.getLiteral)(clientOutputField === null || clientOutputField === void 0 ? void 0 : clientOutputField.value);
    if (!clientOutput) {
        // no user-declared Prisma Client output location
        return '@prisma/client';
    }
    if (path_1.default.isAbsolute(clientOutput)) {
        // absolute path
        return clientOutput;
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const zmodelDir = path_1.default.dirname(model.$document.uri.fsPath);
    // compute prisma schema absolute output path
    let prismaSchemaOutputDir = path_1.default.resolve(zmodelDir, './prisma');
    const prismaPlugin = model.declarations.find((d) => (0, ast_1.isPlugin)(d) && d.fields.some((f) => f.name === 'provider' && (0, utils_1.getLiteral)(f.value) === '@core/prisma'));
    if (prismaPlugin) {
        const output = (0, utils_1.getLiteral)((_a = prismaPlugin.fields.find((f) => f.name === 'output')) === null || _a === void 0 ? void 0 : _a.value);
        if (output) {
            if (path_1.default.isAbsolute(output)) {
                // absolute prisma schema output path
                prismaSchemaOutputDir = path_1.default.dirname(output);
            }
            else {
                prismaSchemaOutputDir = path_1.default.dirname(path_1.default.resolve(zmodelDir, output));
            }
        }
    }
    // resolve the prisma client output path, which is relative to the prisma schema
    const resolvedPrismaClientOutput = path_1.default.resolve(prismaSchemaOutputDir, clientOutput);
    // DEBUG:
    // console.log('PRISMA SCHEMA PATH:', prismaSchemaOutputDir);
    // console.log('PRISMA CLIENT PATH:', resolvedPrismaClientOutput);
    // console.log('IMPORTING PATH:', importingFromDir);
    // compute prisma client absolute output dir relative to the importing file
    return normalizePath(path_1.default.relative(importingFromDir, resolvedPrismaClientOutput));
}
exports.getPrismaClientImportSpec = getPrismaClientImportSpec;
function normalizePath(p) {
    return p ? p.split(path_1.default.sep).join(path_1.default.posix.sep) : p;
}
/**
 * Loads Prisma DMMF with appropriate version
 */
function getDMMF(options, defaultPrismaVersion) {
    var _a;
    const prismaVersion = (_a = (0, runtime_1.getPrismaVersion)()) !== null && _a !== void 0 ? _a : defaultPrismaVersion;
    if (prismaVersion && semver.gte(prismaVersion, '5.0.0')) {
        const _getDMMF = require('@prisma/internals-v5').getDMMF;
        return _getDMMF(options);
    }
    else {
        const _getDMMF = require('@prisma/internals').getDMMF;
        return _getDMMF(options);
    }
}
exports.getDMMF = getDMMF;
//# sourceMappingURL=prisma.js.map