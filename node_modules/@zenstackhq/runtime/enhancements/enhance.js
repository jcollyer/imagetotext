"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enhance = void 0;
const loader_1 = require("../loader");
const omit_1 = require("./omit");
const password_1 = require("./password");
const policy_1 = require("./policy");
let hasPassword = undefined;
let hasOmit = undefined;
/**
 * Gets a Prisma client enhanced with all essential behaviors, including access
 * policy, field validation, field omission and password hashing.
 *
 * It's a shortcut for calling withOmit(withPassword(withPolicy(prisma, options))).
 *
 * @param prisma The Prisma client to enhance.
 * @param context The context to for evaluating access policies.
 * @param options Options.
 */
function enhance(prisma, context, options) {
    var _a;
    let result = prisma;
    if (hasPassword === undefined || hasOmit === undefined) {
        const modelMeta = (_a = options === null || options === void 0 ? void 0 : options.modelMeta) !== null && _a !== void 0 ? _a : (0, loader_1.getDefaultModelMeta)(options === null || options === void 0 ? void 0 : options.loadPath);
        const allFields = Object.values(modelMeta.fields).flatMap((modelInfo) => Object.values(modelInfo));
        hasPassword = allFields.some((field) => { var _a; return (_a = field.attributes) === null || _a === void 0 ? void 0 : _a.some((attr) => attr.name === '@password'); });
        hasOmit = allFields.some((field) => { var _a; return (_a = field.attributes) === null || _a === void 0 ? void 0 : _a.some((attr) => attr.name === '@omit'); });
    }
    if (hasPassword) {
        // @password proxy
        result = (0, password_1.withPassword)(result, options);
    }
    if (hasOmit) {
        // @omit proxy
        result = (0, omit_1.withOmit)(result, options);
    }
    // policy proxy
    result = (0, policy_1.withPolicy)(result, context, options);
    return result;
}
exports.enhance = enhance;
//# sourceMappingURL=enhance.js.map