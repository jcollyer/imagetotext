"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDeferredPromise = void 0;
/**
 * Creates a promise that only executes when it's awaited or .then() is called.
 * @see https://github.com/prisma/prisma/blob/main/packages/client/src/runtime/core/request/createPrismaPromise.ts
 */
function createDeferredPromise(callback) {
    let promise;
    const cb = () => {
        try {
            return (promise !== null && promise !== void 0 ? promise : (promise = valueToPromise(callback())));
        }
        catch (err) {
            // deal with synchronous errors
            return Promise.reject(err);
        }
    };
    return {
        then(onFulfilled, onRejected) {
            return cb().then(onFulfilled, onRejected);
        },
        catch(onRejected) {
            return cb().catch(onRejected);
        },
        finally(onFinally) {
            return cb().finally(onFinally);
        },
        [Symbol.toStringTag]: 'ZenStackPromise',
    };
}
exports.createDeferredPromise = createDeferredPromise;
function valueToPromise(thing) {
    if (typeof thing === 'object' && typeof (thing === null || thing === void 0 ? void 0 : thing.then) === 'function') {
        return thing;
    }
    else {
        return Promise.resolve(thing);
    }
}
//# sourceMappingURL=promise.js.map