"use strict";
/* eslint-disable @typescript-eslint/no-var-requires */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prismaClientUnknownRequestError = exports.prismaClientKnownRequestError = exports.prismaClientValidationError = exports.formatObject = void 0;
const path_1 = __importDefault(require("path"));
const util = __importStar(require("util"));
/**
 * Formats an object for pretty printing.
 */
function formatObject(value) {
    return util.formatWithOptions({ depth: 20 }, value);
}
exports.formatObject = formatObject;
let _PrismaClientValidationError;
let _PrismaClientKnownRequestError;
let _PrismaClientUnknownRequestError;
/* eslint-disable @typescript-eslint/no-explicit-any */
function loadPrismaModule(prisma) {
    var _a;
    // https://github.com/prisma/prisma/discussions/17832
    if ((_a = prisma._engineConfig) === null || _a === void 0 ? void 0 : _a.datamodelPath) {
        // try engine path first
        const loadPath = path_1.default.dirname(prisma._engineConfig.datamodelPath);
        try {
            const _prisma = require(loadPath).Prisma;
            if (typeof _prisma !== 'undefined') {
                return _prisma;
            }
        }
        catch (_b) {
            // noop
        }
    }
    try {
        // Prisma v4
        return require('@prisma/client/runtime');
    }
    catch (_c) {
        try {
            // Prisma v5
            return require('@prisma/client');
        }
        catch (err) {
            if (process.env.ZENSTACK_TEST === '1') {
                // running in test, try cwd
                try {
                    return require(path_1.default.join(process.cwd(), 'node_modules/@prisma/client/runtime'));
                }
                catch (_d) {
                    return require(path_1.default.join(process.cwd(), 'node_modules/@prisma/client'));
                }
            }
            else {
                throw err;
            }
        }
    }
}
function prismaClientValidationError(prisma, options, message) {
    var _a;
    if (!_PrismaClientValidationError) {
        const _prisma = (_a = options === null || options === void 0 ? void 0 : options.prismaModule) !== null && _a !== void 0 ? _a : loadPrismaModule(prisma);
        _PrismaClientValidationError = _prisma.PrismaClientValidationError;
    }
    throw new _PrismaClientValidationError(message, { clientVersion: prisma._clientVersion });
}
exports.prismaClientValidationError = prismaClientValidationError;
function prismaClientKnownRequestError(prisma, options, ...args) {
    var _a;
    if (!_PrismaClientKnownRequestError) {
        const _prisma = (_a = options === null || options === void 0 ? void 0 : options.prismaModule) !== null && _a !== void 0 ? _a : loadPrismaModule(prisma);
        _PrismaClientKnownRequestError = _prisma.PrismaClientKnownRequestError;
    }
    return new _PrismaClientKnownRequestError(...args);
}
exports.prismaClientKnownRequestError = prismaClientKnownRequestError;
function prismaClientUnknownRequestError(prisma, options, ...args) {
    var _a;
    if (!_PrismaClientUnknownRequestError) {
        const _prisma = (_a = options === null || options === void 0 ? void 0 : options.prismaModule) !== null && _a !== void 0 ? _a : loadPrismaModule(prisma);
        _PrismaClientUnknownRequestError = _prisma.PrismaClientUnknownRequestError;
    }
    throw new _PrismaClientUnknownRequestError(...args);
}
exports.prismaClientUnknownRequestError = prismaClientUnknownRequestError;
//# sourceMappingURL=utils.js.map