"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const serializer_1 = __importDefault(require("./serializer"));
class PolymorphicSerializer extends serializer_1.default {
    serialisers;
    key;
    constructor(commonName, key, serializers) {
        super(commonName);
        this.serialisers = serializers;
        this.key = key;
    }
    async serialize(data, options) {
        if (Array.isArray(data)) {
            const documents = await Promise.all(data.map((d) => {
                return this.serializeSingle(d, options);
            }));
            return documents.reduce((result, document) => {
                if (!result) {
                    return document;
                }
                result.data = [result.data ?? [], document.data ?? []].flat();
                result.included = [result.included ?? [], document.included ?? []].flat();
                return result;
            });
        }
        else if (data) {
            return this.serializeSingle(data, options);
        }
        return Object.values(this.serialisers)[0].serialize(data, options);
    }
    createIdentifier(data, options) {
        const serializer = this.getSerializerForData(data);
        if (serializer) {
            return serializer.createIdentifier(data, options);
        }
        return super.createIdentifier(data, options);
    }
    async createResource(data, options, helpers, relatorDataCache) {
        const serializer = this.getSerializerForData(data);
        if (serializer) {
            return serializer.createResource(data, options, helpers, relatorDataCache);
        }
        return super.createResource(data, options, helpers, relatorDataCache);
    }
    async serializeSingle(data, options) {
        const serializer = this.getSerializerForData(data);
        if (serializer) {
            return serializer.serialize(data, options);
        }
        return super.serialize(data, options);
    }
    getSerializerForData(data) {
        if (this.serialisers[data[this.key]]) {
            return this.serialisers[data[this.key]];
        }
        return null;
    }
}
exports.default = PolymorphicSerializer;
//# sourceMappingURL=polymorphic-serialiser.js.map