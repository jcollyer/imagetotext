"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZModelFormatter = void 0;
const langium_1 = require("langium");
const ast = __importStar(require("@zenstackhq/language/ast"));
class ZModelFormatter extends langium_1.AbstractFormatter {
    format(node) {
        const formatter = this.getNodeFormatter(node);
        if (ast.isDataModelField(node)) {
            formatter.property('type').prepend(langium_1.Formatting.oneSpace());
            if (node.attributes.length > 0) {
                formatter.properties('attributes').prepend(langium_1.Formatting.oneSpace());
            }
        }
        else if (ast.isDataModelFieldAttribute(node)) {
            formatter.keyword('(').surround(langium_1.Formatting.noSpace());
            formatter.keyword(')').prepend(langium_1.Formatting.noSpace());
            formatter.keyword(',').append(langium_1.Formatting.oneSpace());
            if (node.args.length > 1) {
                formatter.nodes(...node.args.slice(1)).prepend(langium_1.Formatting.oneSpace());
            }
        }
        else if (ast.isAttributeArg(node)) {
            formatter.keyword(':').prepend(langium_1.Formatting.noSpace());
            formatter.keyword(':').append(langium_1.Formatting.oneSpace());
        }
        else if (ast.isAbstractDeclaration(node)) {
            const bracesOpen = formatter.keyword('{');
            const bracesClose = formatter.keyword('}');
            // allow extra blank lines between declarations
            formatter.interior(bracesOpen, bracesClose).prepend(langium_1.Formatting.indent({ allowMore: true }));
            bracesOpen.prepend(langium_1.Formatting.oneSpace());
            bracesClose.prepend(langium_1.Formatting.newLine());
        }
        else if (ast.isModel(node)) {
            const model = node;
            const nodes = formatter.nodes(...model.declarations);
            nodes.prepend(langium_1.Formatting.noIndent());
        }
    }
    doDocumentFormat(document, options, range) {
        this.formatOptions = options;
        return super.doDocumentFormat(document, options, range);
    }
    getFormatOptions() {
        return this.formatOptions;
    }
    getIndent() {
        return 1;
    }
}
exports.ZModelFormatter = ZModelFormatter;
//# sourceMappingURL=zmodel-formatter.js.map