"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.name = void 0;
const sdk_1 = require("@zenstackhq/sdk");
const path_1 = __importDefault(require("path"));
const plugin_utils_1 = require("../plugin-utils");
exports.name = 'Model Metadata';
const run = (model, options, _dmmf, globalOptions) => __awaiter(void 0, void 0, void 0, function* () {
    let output = options.output ? options.output : (0, plugin_utils_1.getDefaultOutputFolder)(globalOptions);
    if (!output) {
        throw new sdk_1.PluginError(options.name, `Unable to determine output path, not running plugin`);
    }
    output = (0, sdk_1.resolvePath)(output, options);
    const outFile = path_1.default.join(output, 'model-meta.ts');
    const dataModels = (0, sdk_1.getDataModels)(model);
    const project = (0, sdk_1.createProject)();
    let shouldCompile = true;
    if (typeof options.compile === 'boolean') {
        // explicit override
        shouldCompile = options.compile;
    }
    else if (globalOptions) {
        // from CLI or config file
        shouldCompile = globalOptions.compile;
    }
    yield (0, sdk_1.generateModelMeta)(project, dataModels, {
        output: outFile,
        compile: shouldCompile,
        preserveTsFiles: options.preserveTsFiles === true,
        generateAttributes: true,
    });
});
exports.default = run;
//# sourceMappingURL=index.js.map