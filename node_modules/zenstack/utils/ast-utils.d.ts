import { BinaryExpr, DataModel, DataModelField, Expression, Model, ModelImport } from '@zenstackhq/language/ast';
import { AstNode, LangiumDocuments } from 'langium';
import { URI } from 'vscode-uri';
export declare function extractDataModelsWithAllowRules(model: Model): DataModel[];
export declare function mergeBaseModel(model: Model): void;
export declare function getIdFields(dataModel: DataModel): DataModelField[];
export declare function isAuthInvocation(node: AstNode): boolean;
export declare function getDataModelFieldReference(expr: Expression): DataModelField | undefined;
export declare function resolveImportUri(imp: ModelImport): URI | undefined;
export declare function resolveTransitiveImports(documents: LangiumDocuments, model: Model): Model[];
export declare function resolveImport(documents: LangiumDocuments, imp: ModelImport): Model | undefined;
export declare function getAllDeclarationsFromImports(documents: LangiumDocuments, model: Model): import("@zenstackhq/language/ast").AbstractDeclaration[];
export declare function isCollectionPredicate(node: AstNode): node is BinaryExpr;
export declare function getContainingDataModel(node: Expression): DataModel | undefined;
/**
 * Walk upward from the current AST node to find the first node that satisfies the predicate.
 */
export declare function findUpAst(node: AstNode, predicate: (node: AstNode) => boolean): AstNode | undefined;
